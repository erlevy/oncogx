{
    "collab_server" : "",
    "contents" : "library(OIsurv)\nlibrary(cgdsr)\nlibrary(cluster)\nlibrary(fpc)\nlibrary(gplots)\nlibrary(heatmap.plus)\nlibrary(reshape2)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(plotrix)\nlibrary(VennDiagram)\nlibrary(ggrepel)\nlibrary(FSA)\n\nresults <- read.csv(\"/Users/Eric/tcrseq/new/final/pancan_results_8-10-2016.txt\", sep=\"\\t\")\nclonotypes <- read.csv(\"/Users/Eric/tcrseq/new/final/pancan_clonotypes_8-10-2016.txt\", sep=\"\\t\")\n\ncdr3_results_current <- results\ncancer_current <- cdr3_results_current\n# remove cohort size <400\n# BLCA, BRCA, COAD, HNSC, KIRC, LGG, LUAD, LUSC, OV, PRAD, STAD, THCA, UCEC\n#cancer_current <- filter(cdr3_results_current, cohort==\"BLCA\" | cohort==\"BRCA\" | cohort==\"COAD\" | cohort==\"HNSC\" |\n#                       cohort==\"KIRC\" | cohort==\"LGG\" | cohort==\"LUAD\" | cohort==\"LUSC\" | cohort==\"OV\" |\n#                       cohort==\"PRAD\" | cohort==\"STAD\" | cohort==\"THCA\" | cohort==\"UCEC\")\n#cancer_current$cohort <- factor(cancer_current$cohort)\n#cancer_split <- split(cancer_current, cancer_current$cohort)\n\n# remove THYM since it only has ONE exome case, UVM and CHOL have no RNA\ncancer_current <- filter(cdr3_results_current, cohort != \"THYM\", cohort != \"UVM\", cohort != \"CHOL\", cohort != \"DLBC\")\n#cancer_current <- filter(cdr3_results_current, cohort != \"THYM\", cohort != \"UVM\", cohort != \"CHOL\",\n#                         cohort != \"ACC\", cohort != \"CESC\", cohort != \"DLBC\", cohort != \"ESCA\", \n#                         cohort != \"KICH\", cohort != \"LGG\", cohort != \"LIHC\", cohort != \"MESO\",\n#                         cohort != \"PCPG\", cohort != \"TGCT\", cohort != \"UCS\")\ncancer_current$cohort <- factor(cancer_current$cohort)\ncancer_split <- split(cancer_current, cancer_current$cohort)\n\n# medians of nonzero pancan\nnonzero_pancan_exome <- filter(cancer_current, exome_cdr3 > 0)\nnonzero_pancan_rna <- filter(cancer_current, rna_cdr3 > 0)\nnonzero_pancan_blood <- filter(cancer_current, blood_cdr3 > 0)\nnonzero_pancan_tils <- filter(cancer_current, percent_tils > 0)\n\nmedian(nonzero_pancan_exome$exome_cdr3)\nquantile(nonzero_pancan_exome$exome_cdr3, 0.9)\nmax(nonzero_pancan_exome$exome_cdr3)\n\nmedian(nonzero_pancan_rna$rna_cdr3)\nquantile(nonzero_pancan_rna$rna_cdr3, 0.9)\nmax(nonzero_pancan_rna$rna_cdr3)\n\nmedian(nonzero_pancan_blood$blood_cdr3)\nquantile(nonzero_pancan_blood$blood_cdr3, 0.9)\nmax(nonzero_pancan_blood$blood_cdr3)\n\nmedian(nonzero_pancan_tils$percent_tils)\nquantile(nonzero_pancan_tils$percent_tils, 0.9)\nmax(nonzero_pancan_tils$percent_tils)\n\nnrow(nonzero_pancan_exome)\nnrow(filter(cancer_current, exome_cdr3==0))\n\nnrow(nonzero_pancan_rna)\nnrow(filter(cancer_current, rna_cdr3==0))\n\nnrow(nonzero_pancan_blood)\nnrow(filter(cancer_current, blood_cdr3==0))\n\nnrow(nonzero_pancan_tils)\nnrow(filter(cancer_current, percent_tils==0))\n\n# correlations with TILs and purity\ncor.test(cancer_current$exome_rpm, cancer_current$percent_tils, method=\"spearman\")\ncor.test(cancer_current$rna_rpm, cancer_current$percent_tils, method=\"spearman\")\ncor.test(cancer_current$blood_rpm, cancer_current$percent_tils, method=\"spearman\")\n\ncor.test(cancer_current$exome_rpm, cancer_current$patient_purity, method=\"spearman\")\ncor.test(cancer_current$rna_rpm, cancer_current$patient_purity, method=\"spearman\")\ncor.test(cancer_current$blood_rpm, cancer_current$patient_purity, method=\"spearman\")\n\n### non-parametric exome testing\n# kruskal-wallis by cohort\nkrusk <- kruskal.test(exome_rpm ~ cohort, data=cancer_current)\ndunn <- dunnTest(exome_rpm ~ cohort, data=cancer_current, method=\"bh\")\n\n# create dunn matrix\ndunn_mat <- matrix(NA, nrow=length(unique(cancer_current$cohort)), ncol=length(unique(cancer_current$cohort)))\nrownames(dunn_mat) <- sort(unique(cancer_current$cohort))\ncolnames(dunn_mat) <- sort(unique(cancer_current$cohort))\nfor (i in 1:nrow(dunn_mat)) {\n  row_name <- rownames(dunn_mat)[i]\n  for (j in 1:i) {\n    col_name <- colnames(dunn_mat)[j]\n    if (row_name == col_name) {dunn_mat[i,j] <- 1}\n    else {\n      dun_access <- paste(col_name, \"-\")\n      dun_access <- paste(dun_access, row_name)\n      dun_i <- which(as.character(dunn$res$Comparison)==dun_access) \n      dun_p <- dunn$res$P.adj[dun_i]\n      dunn_mat[i,j] <- dun_p\n      dunn_mat[j,i] <- dun_p\n    }\n  }\n}\n\nheatmap.plus(-log10(dunn_mat), col=bluered(51), symm=TRUE, keep.dendro=FALSE, Rowv=NA, Colv=NA)\n\narrange(dunn$res, P.adj)\n\n\n### non-parametric RNA testing\n# kruskal-wallis by cohort\nkrusk <- kruskal.test(rna_rpm ~ cohort, data=cancer_current)\ndunn <- dunnTest(rna_rpm ~ cohort, data=cancer_current, method=\"bh\")\n\n# create dunn matrix\ndunn_mat <- matrix(NA, nrow=length(unique(cancer_current$cohort)), ncol=length(unique(cancer_current$cohort)))\nrownames(dunn_mat) <- sort(unique(cancer_current$cohort))\ncolnames(dunn_mat) <- sort(unique(cancer_current$cohort))\nfor (i in 1:nrow(dunn_mat)) {\n  row_name <- rownames(dunn_mat)[i]\n  for (j in 1:i) {\n    col_name <- colnames(dunn_mat)[j]\n    if (row_name == col_name) {dunn_mat[i,j] <- 1}\n    else {\n      dun_access <- paste(col_name, \"-\")\n      dun_access <- paste(dun_access, row_name)\n      dun_i <- which(as.character(dunn$res$Comparison)==dun_access) \n      dun_p <- dunn$res$P.adj[dun_i]\n      dunn_mat[i,j] <- dun_p\n      dunn_mat[j,i] <- dun_p\n    }\n  }\n}\n\nheatmap.plus(-log10(dunn_mat), col=bluered(51), symm=TRUE, keep.dendro=FALSE, Rowv=NA, Colv=NA)\n\narrange(dunn$res, P.adj)\n\n### one-vs-all exome testing\n\none_vs_all_exome <- rep(NA, length(unique(cancer_current$cohort)))\nnames(one_vs_all_exome) <- unique(cancer_current$cohort)\n\none_vs_all_rna <- rep(NA, length(unique(cancer_current$cohort)))\nnames(one_vs_all_rna) <- unique(cancer_current$cohort)\n\nfor (i in 1:length(one_vs_all_exome)) {\n  cohort_i <- names(one_vs_all_exome)[i]\n  cohort_exome_rpm <- filter(cancer_current, cohort == cohort_i)$exome_rpm\n  others_exome_rpm <- filter(cancer_current, cohort != cohort_i)$exome_rpm\n  cohort_rna_rpm <- filter(cancer_current, cohort == cohort_i)$rna_rpm\n  others_rna_rpm <- filter(cancer_current, cohort != cohort_i)$rna_rpm\n  \n  one_vs_all_exome[i] <- wilcox.test(cohort_exome_rpm, others_exome_rpm)$p.value\n  one_vs_all_rna[i] <- wilcox.test(cohort_rna_rpm, others_rna_rpm)$p.value\n}\n\nsort(p.adjust(one_vs_all_exome, method=\"BH\"))\nsort(p.adjust(one_vs_all_rna, method=\"BH\"))\n\n# contrast infiltration of cancer types\nexome_split <- lapply(cancer_split, '[[', \"exome_rpm\")\nrna_split <- lapply(cancer_split, '[[', \"rna_rpm\")\nblood_split <- lapply(cancer_split, '[[', \"blood_rpm\")\nidna_split <- lapply(cancer_split, '[[', \"iDNA_score\")\n\n#ggplot(cancer_current, aes(x=exome_rpm, y=rna_rpm, colour=cohort)) + geom_point()\n\n#exome_avg <- sapply(exome_split, mean, na.rm=TRUE)\n#rna_avg <- sapply(rna_split, mean, na.rm=TRUE)\nexome_avg <- log(sapply(exome_split, mean, na.rm=TRUE), 10)\nrna_avg <- log(sapply(rna_split, mean, na.rm=TRUE), 10)\ncohort_sizes <- table(cancer_current$cohort)\navgs_plot <- as.data.frame(cbind(exome_avg, rna_avg, cohort_sizes))\n\n### FIGURE: average RNA vs. tumor exome RPM by cohort ###\n\n#ggplot(avgs_plot, aes(exome_avg, rna_avg, size=cohort_sizes, colour=rownames(avgs_plot))) + geom_point() + labs(title=\"Cohort average exome and RNA RPM\", x=\"log(exome CDR3 rpm)\", y=\"log(RNA CDR3 rpm)\")\nggplot(avgs_plot, aes(exome_avg, rna_avg)) + geom_point() + labs(x=\"Normalized DNA CDR3 fraction (log10)\", y=\"Normalized RNA CDR3 fraction (log10)\") + geom_text_repel(data=avgs_plot, aes(label=rownames(avgs_plot)), size=6) + theme(text=element_text(size=16))\n\n\n### FIGURE: RNA vs. CDR3 read correlations\nggplot(cancer_current, aes(exome_rpm, rna_rpm))\n\n### FIGURE: Venn diagram/overall profiling of cohort sizes ###\n\n# overall profiling\nexome_n <- nrow(filter(cancer_current, !is.na(exome_rpm)))\nrna_n <- nrow(filter(cancer_current, !is.na(rna_rpm)))\nblood_n <- nrow(filter(cancer_current, !is.na(blood_rpm)))\nexome_rna_n <- nrow(filter(cancer_current, !is.na(rna_rpm) & !is.na(exome_rpm)))\nexome_blood_n <- nrow(filter(cancer_current, !is.na(blood_rpm) & !is.na(exome_rpm)))\nblood_rna_n <- nrow(filter(cancer_current, !is.na(rna_rpm) & !is.na(blood_rpm)))\nexome_rna_blood_n <- nrow(filter(cancer_current, !is.na(rna_rpm) & !is.na(exome_rpm) & !is.na(blood_rpm)))\n\ngrid.newpage()\ndraw.triple.venn(area1 = exome_n, area2 = rna_n, area3 = blood_n, \n                 n12 = exome_rna_n, n23 = blood_rna_n, n13 = exome_blood_n,\n                 n123 = exome_rna_blood_n, fill = c(\"skyblue\", \"orange\", \"green\"),\n                 category = c(\"Tumor DNA\", \"Tumor RNA\", \"Blood DNA\"), cex=2, cat.cex=2, \n                 cat.pos=c(-10,10,180), cat.dist=c(0.05, 0.05, 0.05))\n\nexome_rna_blood <- filter(cancer_current, !is.na(rna_rpm) & !is.na(exome_rpm) & !is.na(blood_rpm))\n\n# initial numbers\nexome_pos <- filter(cancer_current, exome_rpm>0)\nrna_pos <- filter(cancer_current, rna_rpm>0)\nblood_pos <- filter(cancer_current, blood_rpm>0)\n\nexome_not_na <- filter(cancer_current, !is.na(exome_rpm))\nrna_not_na <- filter(cancer_current, !is.na(rna_rpm))\nblood_not_na <- filter(cancer_current, !is.na(blood_rpm))\n\n### FIGURE: cohort size barplot ###\n\ncohort_sizes <- as.data.frame(table(exome_rna_blood$cohort))\nggplot(cohort_sizes, aes(x=reorder(Var1, -Freq), y=Freq)) + geom_bar(stat=\"identity\") + labs(x=\"Cohort\", y=\"Number of patients\") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(text=element_text(size=16))\n\n### FIGURE: compare read counts of tumor exome and RNA by cohort ###\n\n# contrast read counts of cancer types\nexome_read_split <- lapply(cancer_split, '[[', \"exome_reads\")\nexome_rpm_split <- lapply(cancer_split, '[[', \"exome_rpm\")\nrna_read_split <- lapply(cancer_split, '[[', \"rna_reads\")\nrna_rpm_split <- lapply(cancer_split, '[[', \"rna_rpm\")\npercent_tils_split <- lapply(cancer_split, '[[', \"percent_tils\")\ntcrb_rpm_split <- lapply(cancer_split, '[[', \"tcrb_rpm\")\ntcrb_rpm_log_split <- lapply(tcrb_rpm_split, FUN=log)\ngsva_cluster_split <- lapply(cancer_split, '[[', \"gsva_cluster\")\n\nexome_read_melt <- melt(exome_read_split)\nexome_read_melt$value <- log(exome_read_melt$value, 10)\nggplot(exome_read_melt, aes(x=L1, y=value)) + geom_boxplot() + labs(title=\"Tumor DNA read counts by cohort\", x=\"Cohort\", y=\"Number of reads (log10)\") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(text=element_text(size=16))\n\nrna_read_melt <- melt(rna_read_split)\nrna_read_melt$value <- log(rna_read_melt$value, 10)\nggplot(rna_read_melt, aes(x=L1, y=value)) + geom_boxplot() + labs(title=\"Tumor RNA read counts by cohort\", x=\"Cohort\", y=\"Number of reads (log10)\") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(text=element_text(size=16))\n\nexome_rpm_melt <- melt(exome_rpm_split)\nexome_rpm_melt$value <- log(exome_rpm_melt$value, 10)\nggplot(exome_rpm_melt, aes(x=L1, y=value)) + geom_boxplot() + labs(title=\"Tumor exome RPM counts by cohort\", x=\"Cohort\", y=\"log(read count)\") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(text=element_text(size=16))\n\nrna_rpm_melt <- melt(rna_rpm_split)\nrna_rpm_melt$value <- log(rna_rpm_melt$value, 10)\nggplot(rna_rpm_melt, aes(x=L1, y=value)) + geom_boxplot() + labs(title=\"Tumor rna RPM counts by cohort\", x=\"Cohort\", y=\"log(read count)\") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(text=element_text(size=16))\n\n# iDNA vs purity for cancer types\nfrac_pure<-aggregate(patient_purity~iDNA_score,data=cancer_current,FUN=function(x) length(x[x>=0.80])/length(x))\nggplot(frac_pure,aes(factor(reorder(iDNA_score,as.numeric(iDNA_score))),patient_purity))+geom_bar(stat=\"identity\")+theme(text=element_text(size=32))+xlab(\"iDNA score\")+ylab(\"Fraction of tumors with ≥80% purity\")+theme_classic(base_size = 16)\n\n# exome CDR3 high without RNA\nexome_pos_rna_neg <- filter(cancer_current,D==\"D+\",R==\"R-\")\nexome_pos_rna_pos <- filter(cancer_current,D==\"D+\",R==\"R+\")\nexome_rpm_list <- list(rna_neg=-log(exome_pos_rna_neg$exome_rpm,10), rna_pos=-log(exome_pos_rna_pos$exome_rpm))\nexome_rpm_melt <- melt(exome_rpm_list)\n#ggplot(exome_rpm_melt, aes(x=L1, y=value)) + geom_boxplot() + labs(title=\"Exome RPM by RNA CDR3 nonzero\", x=\"RNA CDR3\", y=\"-log(exome rpm)\")\n\nexome_med <- median(filter(cancer_current, exome_rpm>0)$exome_rpm)\nexome_pos_rna_neg_high <- filter(exome_pos_rna_neg, exome_rpm > exome_med)\nexome_pos_rna_neg_df <- data.frame(table(exome_pos_rna_neg_high$cohort), table(exome_pos_rna_neg$cohort))\ncolnames(exome_pos_rna_neg_df)[1] <- \"Cohort\"\n#ggplot(clonotypes_cohort_df, aes(x=Var1, y=Freq)) + geom_bar(stat=\"identity\") + labs(title=\"Percent of cohort that has a public clonotype\", x=\"Cohort\", y=\"Percent\")\nggplot(exome_pos_rna_neg_df, aes(Freq, Freq.1)) + geom_point() + labs(title=\"Number of D+R- patients with any exome RPM vs high by cohort\", x=\"Number of patients with high exome CDR3\", y=\"Number of D+R- patients\") + geom_text_repel(data=exome_pos_rna_neg_df, aes(label=Cohort))\n\nexome_pos_rna_neg_frac_df <- data.frame(table(exome_pos_rna_neg_high$cohort)/table(exome_pos_rna_neg$cohort))\ncolnames(exome_pos_rna_neg_df)[1] <- \"Cohort\"\nggplot(exome_pos_rna_neg_frac_df, aes(x=Var1, y=Freq)) + geom_bar(stat=\"identity\") + labs(title=\"Fraction of D+R- patients with high exome RPM by cohort\", x=\"Cohort\", y=\"Percent\")\n\nexome_pos_vs_rna_df <- data.frame(table(exome_pos_rna_neg$cohort), table(exome_pos_rna_pos$cohort))\nexome_pos_vs_rna_df <- filter(exome_pos_vs_rna_df, Freq>0)\nexome_pos_vs_rna_df$Var1.1 <- NULL\ncolnames(exome_pos_vs_rna_df)[1] <- \"Cohort\"\ncolnames(exome_pos_vs_rna_df)[2] <- \"D+R-\"\ncolnames(exome_pos_vs_rna_df)[3] <- \"D+R+\"\nexome_pos_vs_rna_df$Cohort <- factor(exome_pos_vs_rna_df$Cohort)\nexome_pos_vs_rna_df_melt <- melt(exome_pos_vs_rna_df)\n\nggplot(exome_pos_vs_rna_df_melt, aes(x=Cohort, y=value, fill=variable)) + geom_bar(stat=\"identity\", position=\"fill\") + labs(x=\"Cohort\", y=\"Fraction\") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(text=element_text(size=16))\n\n# check D+ for tcrb vs. R+/R-\nexome_pos_new <- mutate(exome_pos,R2=ifelse(rna_rpm==0,0,1))\n\nwilcox.test(exome_pos_new$tcrb_rpm, exome_pos_new$R2)\nboxplot(lapply(split(exome_pos$tcrb_rpm, exome_pos$R), log10))\nrna_tcrb_box <- melt(lapply(split(exome_pos$tcrb_rpm, exome_pos$R), log10))\nggplot(rna_tcrb_box, aes(x=L1, y=value)) + geom_boxplot() + labs(x=\"\", y=\"TCRB gene expression (log10 RPM)\") + theme(text=element_text(size=16))\n\nrna_exome_box <- melt(lapply(split(exome_pos$exome_rpm, exome_pos$R), log10))\nggplot(rna_exome_box, aes(x=L1, y=value)) + geom_boxplot() + labs(x=\"\", y=\"Tumor DNA CDR3 abundance (log10)\") + theme(text=element_text(size=16))\n\n# idna by cohort\nggplot(cancer_current,aes(as.factor(iDNA_score)))+geom_bar()+facet_wrap(~cohort, ncol=4, scales=\"free_y\")\n\n# exome high by cohort\nexome_rpm_med <- median(filter(cancer_current, exome_level>0)$exome_rpm)\ncancer_current<-mutate(cancer_current,exome_lowhigh=ifelse(exome_rpm>exome_rpm_med,\"1\",\"0\"))\nexome_nonzero <- filter(cancer_current, exome_level==1)\n\nggplot(cancer_current,aes(as.factor(iDNA_score)))+geom_bar()+facet_wrap(~cohort, ncol=4, scales=\"free_y\")\nggplot(exome_nonzero,aes(as.factor(exome_lowhigh)))+geom_bar()+facet_wrap(~cohort, ncol=4, scales=\"free_y\")\n\n\n# gender comparison by cohort\ncompare_gender <- function(df_in)\n{\n  gender_split <- split(df_in, df_in$gender)  \n  gender_fc <- mean(gender_split$male$rna_rpm, na.rm=TRUE)/mean(gender_split$female$rna_rpm, na.rm=TRUE)\n}\n\ngender_comparisons <- lapply(cancer_split, compare_gender)\n\n",
    "created" : 1470937632415.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3925059127",
    "id" : "DB3F77C1",
    "lastKnownWriteTime" : 1474609165,
    "last_content_update" : 1474609165728,
    "path" : "~/tcrseq/new/rstudio_plots/dna_rna_infiltration.R",
    "project_path" : "dna_rna_infiltration.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}